from bio import *


DNA2INT = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
]


from bio import *


class SuperblockRank:
    rank: int
    is_first: bool

    def __init__(self, rank, is_first):
        self.rank = rank
        self.is_first = is_first

    def __lt__(self, other):
        return self.rank < other.rank or (
            self.rank == other.rank and self.is_first and not other.is_first
        )

    def __le__(self, other):
        return self.rank <= other.rank

    def __eq__(self, other):
        return self.rank == other.rank

    def __ne__(self, other):
        return self.rank != other.rank

    def __gt__(self, other):
        return self.rank > other.rank or (
            self.rank == other.rank and not self.is_first and other.is_first
        )

    def __ge__(self, other):
        return self.rank >= other.rank

    def __repr__(self):
        return f"{'First' if self.is_first else 'Some'}({self.rank})"


class SuperblockRank:
    rank: int
    is_first: bool

    def __init__(self, rank, is_first):
        self.rank = rank
        self.is_first = is_first

    def __lt__(self, other):
        return self.rank < other.rank or (
            self.rank == other.rank and self.is_first and not other.is_first
        )

    def __le__(self, other):
        return self.rank <= other.rank

    def __eq__(self, other):
        return self.rank == other.rank

    def __ne__(self, other):
        return self.rank != other.rank

    def __gt__(self, other):
        return self.rank > other.rank or (
            self.rank == other.rank and not self.is_first and other.is_first
        )

    def __ge__(self, other):
        return self.rank >= other.rank

    def __repr__(self):
        return f"{'First' if self.is_first else 'Some'}({self.rank})"


class RankSelect:
    n: int
    bits: List[int]
    superblocks_1: List[SuperblockRank]
    superblocks_0: List[SuperblockRank]
    s: int
    k: int

    def __init__(self, bits, k):
        self.n = len(bits)
        self.bits = bits
        self.s = k * 32
        self.k = k
        self.superblocks_1 = self._create_superblocks(True)
        self.superblocks_0 = self._create_superblocks(False)

    def count_zeros_in_byte(self, b):
        zero_count = 0

        for i in range(8):  # Check each of the 8 bits
            if (b & (1 << i)) == 0:
                zero_count += 1

        return zero_count

    def _create_superblocks(self, t):
        superblocks = []
        rank = 0
        last_rank = -1
        i = 0
        nblocks = (len(self.bits) + 7) // 8  # Number of blocks

        for block_index in range(nblocks):
            b = self._get_block(block_index)

            if i % self.s == 0:
                if rank != last_rank:
                    superblocks.append(SuperblockRank(rank, bool(1)))

                else:
                    superblocks.append(SuperblockRank(rank, bool(0)))

                last_rank = rank

            rank = rank + (
                bin(b).count("1") if t == True else self.count_zeros_in_byte(b)
            )

            i += 8

        return superblocks

    def _get_block(self, position):
        """Get the block (byte) at the given position."""
        
        assert position <= (
            len(self.bits) // 8
        ), f"Out of bounds ({position}/{len(self.bits) // 8})"

        first_bit = position * 8
        bit_count = min(8, len(self.bits) - first_bit)  # The number of bits to consider

        result = 0
        mask = 1

        for i in range(bit_count):
            if self.bits[first_bit + i]:
                result = result | mask

            mask <<= 1

        return result

    def _get_block_select(self, position):
        """Get the block (byte) at the given position."""
        assert position < (
            len(self.bits) // 8
        ), f"Out of bounds ({position}/{len(self.bits) // 8})"

        first_bit = position * 8
        bit_count = min(8, len(self.bits) - first_bit)  # The number of bits to consider

        result = 0
        mask = 1

        for i in range(bit_count):
            if self.bits[first_bit + i]:
                result |= mask

            mask <<= 1

        return result

    def rank(self, i):
        return self.rank_1(i)

    def create_mask(self, j):
        mask = (2 << j) - 1
        return mask

    def rank_1(self, index):
        if index >= self.n:
            return None
        s = index // self.s  # superblock index
        b = index // 8  # block index
        j = index % 8  # bit index within the block

        rank = self.superblocks_1[s].rank  # rank from the superblock

        mask = (2 << j) - 1

        block = self._get_block(b)  # retrieve the block

        rank_within_block = bin(block & mask).count("1")  # rank within the block

        rank += rank_within_block

        # add ranks of blocks from the start of superblock up to the current block
        for block_index in range(s * self.s // 8, b):
            block = self._get_block(block_index)
            block_rank = bin(block).count("1")

            rank += block_rank

        return rank

    def rank_0(self, index):
        rank_result = self.rank_1(index)

        if rank_result is not None:
            return (index + 1) - rank_result

        else:
            return None

    def _binary_search_superblock(self, superblocks, j):
        low, high = 0, len(superblocks)
        while low < high:
            mid = (low + high) // 2

            if superblocks[mid].rank < j:
                low = mid + 1

            else:
                high = mid

        return low

    def select_x(self, j, superblocks, is_match, count_all):
        if j == 0:
            return None

        # Binary search to find the superblock
        superblock = self._binary_search_superblock(superblocks, j)

        if superblock > 0:
            superblock -= 1

        rank = superblocks[superblock].rank

        first_block = superblock * self.s // 8

        num_blocks = len(self.bits) // 8
        for block in range(first_block, min(first_block + (self.s // 8), num_blocks)):
            b = self._get_block_select(block)
            p = count_all(b)

            if rank + p >= j:
                bit = 1
                max_bit = min(8, len(self.bits) - block * 8)

                for i in range(max_bit):
                    rank += int(is_match(b, bit))

                    if rank == j:
                        return block * 8 + i

                    bit <<= 1
            rank += p

        return None

    def select_1(self, j):
        is_match = lambda b, bit: (b & bit) != 0
        count_all = lambda b: bin(b).count("1")
        return self.select_x(j, self.superblocks_1, is_match, count_all)

    def select_0(self, j):
        is_match = lambda b, bit: (b & bit) == 0
        count_all = lambda b: bin(b).count("0")
        return self.select_x(j, self.superblocks_0, is_match, count_all)

    def __repr__(self):
        return f"RankSelect n: {self.n}, bits: {self.bits}, superblocks_1: {self.superblocks_1}, superblocks_0: {self.superblocks_0}, s: {self.s}, k: {self.k}"


class WaveletMatrix:
    levels: List[RankSelect]
    zeros: List[int]
    height: int
    width: int

    def __init__(self, text):
        self.width = len(text)
        self.height = 3  # Assuming the alphabet size <= 8 (ACGTN$)
        self.zeros = []
        bits = [0] * len(text)
        self.levels = []

        curr_zeros = [ord(char) for char in text]
        curr_ones = []

        for level in range(self.height):
            shift = self.height - level - 1

            next_zeros, next_ones, curr_bits = [], [], [0] * self.width

            for i, val in enumerate(curr_zeros):
                bit = ((DNA2INT[val] >> shift) & 1) == 1
                curr_bits[i] = int(bit)

                if bit:
                    next_ones.append(val)

                else:
                    next_zeros.append(val)

            for i, val in enumerate(curr_ones, start=len(curr_zeros)):
                bit = ((DNA2INT[val] >> shift) & 1) == 1
                curr_bits[i] = int(bit)

                if bit:
                    next_ones.append(val)
                else:
                    next_zeros.append(val)

            curr_zeros, curr_ones = next_zeros, next_ones
            level = RankSelect(curr_bits, 1)
            self.levels.append(level)
            self.zeros.append(len(curr_zeros))

    def prank(self, level, p, val):
        if p == 0:
            return 0

        elif val == 0:
            return self.levels[level].rank_0(p - 1)

        else:
            return self.levels[level].rank_1(p - 1)

    def rank(self, symbol, pos):
        spos, epos = 0, pos + 1

        for level in range(self.height):
            shift = self.height - level - 1
            bit = ((DNA2INT[symbol] >> shift) & 1) == 1
            bitint = int(bit)

            if bitint == 1:
                spos = self.prank(level, spos, 1) + self.zeros[level]

                epos = self.prank(level, epos, 1) + self.zeros[level]
            else:
                spos = self.prank(level, spos, 0)

                epos = self.prank(level, epos, 0)

        return epos - spos


def test_wavelet_matrix():
    text = "AANGGT$ACCNTT$"
    wm = WaveletMatrix(text)

    assert wm.rank(ord("A"), 0) == 1
    assert wm.rank(ord("G"), 9) == 2
    assert wm.rank(ord("T"), 13) == 3

    print("All Tests Passed")


if __name__ == "__main__":
    test_wavelet_matrix()



